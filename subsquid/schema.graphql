# Core Entities

type Persona @entity {
  id: ID! # tokenId
  tokenId: BigInt! @index
  creator: String! @index
  owner: String! @index
  name: String! @index
  symbol: String! @index
  erc20Token: String! @index
  pairToken: String! @index
  agentToken: String
  
  # Status
  pairCreated: Boolean!
  pairAddress: String
  
  # Timestamps
  createdAt: DateTime!
  createdAtBlock: BigInt!
  
  # Stats
  totalDeposited: BigInt!
  tokensSold: BigInt!
  graduationThreshold: BigInt!
  totalAgentDeposited: BigInt!
  minAgentTokens: BigInt!
  
  # Relations
  trades: [Trade!]! @derivedFrom(field: "persona")
  metadata: [PersonaMetadata!]! @derivedFrom(field: "persona")
  agentDeposits: [AgentDeposit!]! @derivedFrom(field: "persona")
}

type PersonaMetadata @entity {
  id: ID! # personaId-key
  persona: Persona!
  key: String! @index
  value: String!
  updatedAt: DateTime!
  updatedAtBlock: BigInt!
}

type Trade @entity {
  id: ID! # txHash-logIndex
  persona: Persona!
  trader: String! @index
  amountIn: BigInt!
  amountOut: BigInt!
  feeAmount: BigInt!
  timestamp: DateTime!
  block: BigInt!
  txHash: String! @index
}

type AgentDeposit @entity {
  id: ID! # personaId-user-index
  persona: Persona!
  user: String! @index
  amount: BigInt!
  timestamp: DateTime!
  withdrawn: Boolean!
  rewardsClaimed: Boolean!
  block: BigInt!
  txHash: String! @index
}

type AgentReward @entity {
  id: ID! # txHash-logIndex
  persona: Persona!
  user: String! @index
  personaTokensReceived: BigInt!
  agentTokenAmount: BigInt!
  timestamp: DateTime!
  block: BigInt!
  txHash: String! @index
}

# Staking Entities

type StakingPool @entity {
  id: ID! # poolId
  poolId: Int! @index
  lpToken: String! @index
  allocBasisPoints: Int!
  isAgentPool: Boolean!
  personaTokenId: BigInt
  isActive: Boolean!
  totalStaked: BigInt!
  accAmicaPerShare: BigInt!
  lastRewardBlock: BigInt!
  createdAt: DateTime!
  createdAtBlock: BigInt!
  
  # Relations
  userStakes: [UserStake!]! @derivedFrom(field: "pool")
}

type UserStake @entity {
  id: ID! # poolId-user
  pool: StakingPool!
  user: String! @index
  flexibleAmount: BigInt!
  lockedAmount: BigInt!
  unclaimedRewards: BigInt!
  firstStakeAt: DateTime!
  lastStakeAt: DateTime!
  
  # Relations
  locks: [StakeLock!]! @derivedFrom(field: "userStake")
}

type StakeLock @entity {
  id: ID! # poolId-user-lockId
  userStake: UserStake!
  lockId: BigInt! @index
  amount: BigInt!
  unlockTime: DateTime! @index
  lockMultiplier: Int!
  createdAt: DateTime!
  createdAtBlock: BigInt!
  isWithdrawn: Boolean!
}

type StakingRewardClaim @entity {
  id: ID! # txHash-logIndex
  user: String! @index
  totalAmount: BigInt!
  timestamp: DateTime!
  block: BigInt!
  txHash: String! @index
}

# Bridge Entities

type BridgeActivity @entity {
  id: ID! # txHash-logIndex
  user: String! @index
  action: BridgeAction!
  amount: BigInt!
  timestamp: DateTime!
  block: BigInt!
  txHash: String! @index
}

enum BridgeAction {
  WRAP
  UNWRAP
}

# Fee Configuration

type FeeConfig @entity {
  id: ID! # "fee-config"
  feePercentage: Int!
  creatorShare: Int!
  minAmicaForReduction: BigInt!
  maxAmicaForReduction: BigInt!
  minReductionMultiplier: Int!
  maxReductionMultiplier: Int!
  lastUpdated: DateTime!
}

type UserSnapshot @entity {
  id: ID! # user address
  user: String! @unique @index
  currentBalance: BigInt!
  currentBlock: BigInt!
  pendingBalance: BigInt!
  pendingBlock: BigInt!
  lastUpdated: DateTime!
}

# Statistics

type GlobalStats @entity {
  id: ID! # "global"
  totalPersonas: Int!
  totalTrades: Int!
  totalVolume: BigInt!
  totalStakingPools: Int!
  totalStaked: BigInt!
  totalBridgeVolume: BigInt!
  lastUpdated: DateTime!
}

type DailyStats @entity {
  id: ID! # date string (YYYY-MM-DD)
  date: DateTime! @index
  newPersonas: Int!
  trades: Int!
  volume: BigInt!
  uniqueTraders: Int!
  bridgeVolume: BigInt!
}

type PersonaDailyStats @entity {
  id: ID! # personaId-date
  persona: Persona!
  date: DateTime! @index
  trades: Int!
  volume: BigInt!
  uniqueTraders: Int!
}
